// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_msg.proto

#include "image_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_image_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bbox_image_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_image_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_image_image_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_image_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_one_detection_image_5fmsg_2eproto;
namespace image_msg {
class imageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<image> _instance;
} _image_default_instance_;
class bboxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bbox> _instance;
} _bbox_default_instance_;
class one_detectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<one_detection> _instance;
} _one_detection_default_instance_;
class detectionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<detections> _instance;
} _detections_default_instance_;
class image_bufDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<image_buf> _instance;
} _image_buf_default_instance_;
}  // namespace image_msg
static void InitDefaultsscc_info_bbox_image_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::image_msg::_bbox_default_instance_;
    new (ptr) ::image_msg::bbox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::image_msg::bbox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bbox_image_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bbox_image_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_detections_image_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::image_msg::_detections_default_instance_;
    new (ptr) ::image_msg::detections();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::image_msg::detections::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_detections_image_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_detections_image_5fmsg_2eproto}, {
      &scc_info_image_image_5fmsg_2eproto.base,
      &scc_info_one_detection_image_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_image_image_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::image_msg::_image_default_instance_;
    new (ptr) ::image_msg::image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::image_msg::image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_image_image_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_image_image_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_image_buf_image_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::image_msg::_image_buf_default_instance_;
    new (ptr) ::image_msg::image_buf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::image_msg::image_buf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_image_buf_image_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_image_buf_image_5fmsg_2eproto}, {
      &scc_info_image_image_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_one_detection_image_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::image_msg::_one_detection_default_instance_;
    new (ptr) ::image_msg::one_detection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::image_msg::one_detection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_one_detection_image_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_one_detection_image_5fmsg_2eproto}, {
      &scc_info_bbox_image_5fmsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_image_5fmsg_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_image_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_image_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_image_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_msg::image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::image_msg::image, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::image_msg::image, height_),
  PROTOBUF_FIELD_OFFSET(::image_msg::image, width_),
  PROTOBUF_FIELD_OFFSET(::image_msg::image, channel_),
  PROTOBUF_FIELD_OFFSET(::image_msg::image, size_),
  PROTOBUF_FIELD_OFFSET(::image_msg::image, mat_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_msg::bbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::image_msg::bbox, x_left_top_),
  PROTOBUF_FIELD_OFFSET(::image_msg::bbox, y_left_top_),
  PROTOBUF_FIELD_OFFSET(::image_msg::bbox, x_right_bottom_),
  PROTOBUF_FIELD_OFFSET(::image_msg::bbox, y_right_bottom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_msg::one_detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::image_msg::one_detection, confindece_),
  PROTOBUF_FIELD_OFFSET(::image_msg::one_detection, this_class_),
  PROTOBUF_FIELD_OFFSET(::image_msg::one_detection, one_bbox_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_msg::detections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::image_msg::detections, detected_flag_),
  PROTOBUF_FIELD_OFFSET(::image_msg::detections, image__),
  PROTOBUF_FIELD_OFFSET(::image_msg::detections, detection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::image_msg::image_buf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::image_msg::image_buf, image__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::image_msg::image)},
  { 11, -1, sizeof(::image_msg::bbox)},
  { 20, -1, sizeof(::image_msg::one_detection)},
  { 28, -1, sizeof(::image_msg::detections)},
  { 36, -1, sizeof(::image_msg::image_buf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::image_msg::_image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::image_msg::_bbox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::image_msg::_one_detection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::image_msg::_detections_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::image_msg::_image_buf_default_instance_),
};

const char descriptor_table_protodef_image_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017image_msg.proto\022\timage_msg\"k\n\005image\022\022\n"
  "\ntime_stamp\030\001 \001(\001\022\016\n\006height\030\002 \001(\005\022\r\n\005wid"
  "th\030\003 \001(\005\022\017\n\007channel\030\004 \001(\005\022\014\n\004size\030\005 \001(\005\022"
  "\020\n\010mat_data\030\006 \001(\014\"^\n\004bbox\022\022\n\nx_left_top\030"
  "\001 \001(\005\022\022\n\ny_left_top\030\002 \001(\005\022\026\n\016x_right_bot"
  "tom\030\003 \001(\005\022\026\n\016y_right_bottom\030\004 \001(\005\"Z\n\rone"
  "_detection\022\022\n\nconfindece\030\001 \001(\002\022\022\n\nthis_c"
  "lass\030\002 \001(\005\022!\n\010one_bbox\030\003 \001(\0132\017.image_msg"
  ".bbox\"r\n\ndetections\022\025\n\rdetected_flag\030\001 \001"
  "(\010\022 \n\006image_\030\002 \003(\0132\020.image_msg.image\022+\n\t"
  "detection\030\003 \003(\0132\030.image_msg.one_detectio"
  "n\"-\n\timage_buf\022 \n\006image_\030\001 \003(\0132\020.image_m"
  "sg.imageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_image_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_image_5fmsg_2eproto_sccs[5] = {
  &scc_info_bbox_image_5fmsg_2eproto.base,
  &scc_info_detections_image_5fmsg_2eproto.base,
  &scc_info_image_image_5fmsg_2eproto.base,
  &scc_info_image_buf_image_5fmsg_2eproto.base,
  &scc_info_one_detection_image_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_image_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_image_5fmsg_2eproto, "image_msg.proto", 496,
  &descriptor_table_image_5fmsg_2eproto_once, descriptor_table_image_5fmsg_2eproto_sccs, descriptor_table_image_5fmsg_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_image_5fmsg_2eproto::offsets,
  file_level_metadata_image_5fmsg_2eproto, 5, file_level_enum_descriptors_image_5fmsg_2eproto, file_level_service_descriptors_image_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_image_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_image_5fmsg_2eproto)), true);
namespace image_msg {

// ===================================================================

void image::InitAsDefaultInstance() {
}
class image::_Internal {
 public:
};

image::image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_msg.image)
}
image::image(const image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mat_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mat_data().empty()) {
    mat_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mat_data(),
      GetArena());
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:image_msg.image)
}

void image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_image_image_5fmsg_2eproto.base);
  mat_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(size_));
}

image::~image() {
  // @@protoc_insertion_point(destructor:image_msg.image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mat_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void image::ArenaDtor(void* object) {
  image* _this = reinterpret_cast< image* >(object);
  (void)_this;
}
void image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const image& image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_image_image_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void image::Clear() {
// @@protoc_insertion_point(message_clear_start:image_msg.image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mat_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mat_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mat_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_msg.image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (!(this->time_stamp() <= 0 && this->time_stamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_stamp(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 channel = 4;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel(), target);
  }

  // int32 size = 5;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_size(), target);
  }

  // bytes mat_data = 6;
  if (this->mat_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_mat_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_msg.image)
  return target;
}

size_t image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_msg.image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mat_data = 6;
  if (this->mat_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mat_data());
  }

  // double time_stamp = 1;
  if (!(this->time_stamp() <= 0 && this->time_stamp() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 channel = 4;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // int32 size = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_msg.image)
  GOOGLE_DCHECK_NE(&from, this);
  const image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_msg.image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_msg.image)
    MergeFrom(*source);
  }
}

void image::MergeFrom(const image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_msg.image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mat_data().size() > 0) {
    _internal_set_mat_data(from._internal_mat_data());
  }
  if (!(from.time_stamp() <= 0 && from.time_stamp() >= 0)) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_msg.image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void image::CopyFrom(const image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_msg.image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool image::IsInitialized() const {
  return true;
}

void image::InternalSwap(image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mat_data_.Swap(&other->mat_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(image, size_)
      + sizeof(image::size_)
      - PROTOBUF_FIELD_OFFSET(image, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bbox::InitAsDefaultInstance() {
}
class bbox::_Internal {
 public:
};

bbox::bbox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_msg.bbox)
}
bbox::bbox(const bbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_left_top_, &from.x_left_top_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_right_bottom_) -
    reinterpret_cast<char*>(&x_left_top_)) + sizeof(y_right_bottom_));
  // @@protoc_insertion_point(copy_constructor:image_msg.bbox)
}

void bbox::SharedCtor() {
  ::memset(&x_left_top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_right_bottom_) -
      reinterpret_cast<char*>(&x_left_top_)) + sizeof(y_right_bottom_));
}

bbox::~bbox() {
  // @@protoc_insertion_point(destructor:image_msg.bbox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bbox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bbox::ArenaDtor(void* object) {
  bbox* _this = reinterpret_cast< bbox* >(object);
  (void)_this;
}
void bbox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bbox& bbox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bbox_image_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void bbox::Clear() {
// @@protoc_insertion_point(message_clear_start:image_msg.bbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_left_top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_right_bottom_) -
      reinterpret_cast<char*>(&x_left_top_)) + sizeof(y_right_bottom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x_left_top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_left_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y_left_top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_left_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x_right_bottom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          x_right_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y_right_bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          y_right_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bbox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_msg.bbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_left_top = 1;
  if (this->x_left_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_left_top(), target);
  }

  // int32 y_left_top = 2;
  if (this->y_left_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y_left_top(), target);
  }

  // int32 x_right_bottom = 3;
  if (this->x_right_bottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x_right_bottom(), target);
  }

  // int32 y_right_bottom = 4;
  if (this->y_right_bottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y_right_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_msg.bbox)
  return target;
}

size_t bbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_msg.bbox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x_left_top = 1;
  if (this->x_left_top() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_left_top());
  }

  // int32 y_left_top = 2;
  if (this->y_left_top() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_left_top());
  }

  // int32 x_right_bottom = 3;
  if (this->x_right_bottom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_right_bottom());
  }

  // int32 y_right_bottom = 4;
  if (this->y_right_bottom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_right_bottom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bbox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_msg.bbox)
  GOOGLE_DCHECK_NE(&from, this);
  const bbox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bbox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_msg.bbox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_msg.bbox)
    MergeFrom(*source);
  }
}

void bbox::MergeFrom(const bbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_msg.bbox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_left_top() != 0) {
    _internal_set_x_left_top(from._internal_x_left_top());
  }
  if (from.y_left_top() != 0) {
    _internal_set_y_left_top(from._internal_y_left_top());
  }
  if (from.x_right_bottom() != 0) {
    _internal_set_x_right_bottom(from._internal_x_right_bottom());
  }
  if (from.y_right_bottom() != 0) {
    _internal_set_y_right_bottom(from._internal_y_right_bottom());
  }
}

void bbox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_msg.bbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bbox::CopyFrom(const bbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_msg.bbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bbox::IsInitialized() const {
  return true;
}

void bbox::InternalSwap(bbox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(bbox, y_right_bottom_)
      + sizeof(bbox::y_right_bottom_)
      - PROTOBUF_FIELD_OFFSET(bbox, x_left_top_)>(
          reinterpret_cast<char*>(&x_left_top_),
          reinterpret_cast<char*>(&other->x_left_top_));
}

::PROTOBUF_NAMESPACE_ID::Metadata bbox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void one_detection::InitAsDefaultInstance() {
  ::image_msg::_one_detection_default_instance_._instance.get_mutable()->one_bbox_ = const_cast< ::image_msg::bbox*>(
      ::image_msg::bbox::internal_default_instance());
}
class one_detection::_Internal {
 public:
  static const ::image_msg::bbox& one_bbox(const one_detection* msg);
};

const ::image_msg::bbox&
one_detection::_Internal::one_bbox(const one_detection* msg) {
  return *msg->one_bbox_;
}
one_detection::one_detection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_msg.one_detection)
}
one_detection::one_detection(const one_detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_one_bbox()) {
    one_bbox_ = new ::image_msg::bbox(*from.one_bbox_);
  } else {
    one_bbox_ = nullptr;
  }
  ::memcpy(&confindece_, &from.confindece_,
    static_cast<size_t>(reinterpret_cast<char*>(&this_class_) -
    reinterpret_cast<char*>(&confindece_)) + sizeof(this_class_));
  // @@protoc_insertion_point(copy_constructor:image_msg.one_detection)
}

void one_detection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_one_detection_image_5fmsg_2eproto.base);
  ::memset(&one_bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&this_class_) -
      reinterpret_cast<char*>(&one_bbox_)) + sizeof(this_class_));
}

one_detection::~one_detection() {
  // @@protoc_insertion_point(destructor:image_msg.one_detection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void one_detection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete one_bbox_;
}

void one_detection::ArenaDtor(void* object) {
  one_detection* _this = reinterpret_cast< one_detection* >(object);
  (void)_this;
}
void one_detection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void one_detection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const one_detection& one_detection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_one_detection_image_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void one_detection::Clear() {
// @@protoc_insertion_point(message_clear_start:image_msg.one_detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && one_bbox_ != nullptr) {
    delete one_bbox_;
  }
  one_bbox_ = nullptr;
  ::memset(&confindece_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&this_class_) -
      reinterpret_cast<char*>(&confindece_)) + sizeof(this_class_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* one_detection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float confindece = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          confindece_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 this_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          this_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .image_msg.bbox one_bbox = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* one_detection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_msg.one_detection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confindece = 1;
  if (!(this->confindece() <= 0 && this->confindece() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_confindece(), target);
  }

  // int32 this_class = 2;
  if (this->this_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_this_class(), target);
  }

  // .image_msg.bbox one_bbox = 3;
  if (this->has_one_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::one_bbox(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_msg.one_detection)
  return target;
}

size_t one_detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_msg.one_detection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .image_msg.bbox one_bbox = 3;
  if (this->has_one_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *one_bbox_);
  }

  // float confindece = 1;
  if (!(this->confindece() <= 0 && this->confindece() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 this_class = 2;
  if (this->this_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_this_class());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void one_detection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_msg.one_detection)
  GOOGLE_DCHECK_NE(&from, this);
  const one_detection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<one_detection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_msg.one_detection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_msg.one_detection)
    MergeFrom(*source);
  }
}

void one_detection::MergeFrom(const one_detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_msg.one_detection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_one_bbox()) {
    _internal_mutable_one_bbox()->::image_msg::bbox::MergeFrom(from._internal_one_bbox());
  }
  if (!(from.confindece() <= 0 && from.confindece() >= 0)) {
    _internal_set_confindece(from._internal_confindece());
  }
  if (from.this_class() != 0) {
    _internal_set_this_class(from._internal_this_class());
  }
}

void one_detection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_msg.one_detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void one_detection::CopyFrom(const one_detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_msg.one_detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool one_detection::IsInitialized() const {
  return true;
}

void one_detection::InternalSwap(one_detection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(one_detection, this_class_)
      + sizeof(one_detection::this_class_)
      - PROTOBUF_FIELD_OFFSET(one_detection, one_bbox_)>(
          reinterpret_cast<char*>(&one_bbox_),
          reinterpret_cast<char*>(&other->one_bbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata one_detection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void detections::InitAsDefaultInstance() {
}
class detections::_Internal {
 public:
};

detections::detections(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image__(arena),
  detection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_msg.detections)
}
detections::detections(const detections& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image__(from.image__),
      detection_(from.detection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detected_flag_ = from.detected_flag_;
  // @@protoc_insertion_point(copy_constructor:image_msg.detections)
}

void detections::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_detections_image_5fmsg_2eproto.base);
  detected_flag_ = false;
}

detections::~detections() {
  // @@protoc_insertion_point(destructor:image_msg.detections)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void detections::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void detections::ArenaDtor(void* object) {
  detections* _this = reinterpret_cast< detections* >(object);
  (void)_this;
}
void detections::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void detections::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const detections& detections::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_detections_image_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void detections::Clear() {
// @@protoc_insertion_point(message_clear_start:image_msg.detections)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image__.Clear();
  detection_.Clear();
  detected_flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* detections::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool detected_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          detected_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .image_msg.image image_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .image_msg.one_detection detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* detections::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_msg.detections)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool detected_flag = 1;
  if (this->detected_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_detected_flag(), target);
  }

  // repeated .image_msg.image image_ = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_image_(i), target, stream);
  }

  // repeated .image_msg.one_detection detection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_detection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_msg.detections)
  return target;
}

size_t detections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_msg.detections)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .image_msg.image image_ = 2;
  total_size += 1UL * this->_internal_image__size();
  for (const auto& msg : this->image__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .image_msg.one_detection detection = 3;
  total_size += 1UL * this->_internal_detection_size();
  for (const auto& msg : this->detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool detected_flag = 1;
  if (this->detected_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void detections::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_msg.detections)
  GOOGLE_DCHECK_NE(&from, this);
  const detections* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<detections>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_msg.detections)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_msg.detections)
    MergeFrom(*source);
  }
}

void detections::MergeFrom(const detections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_msg.detections)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image__.MergeFrom(from.image__);
  detection_.MergeFrom(from.detection_);
  if (from.detected_flag() != 0) {
    _internal_set_detected_flag(from._internal_detected_flag());
  }
}

void detections::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_msg.detections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detections::CopyFrom(const detections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_msg.detections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detections::IsInitialized() const {
  return true;
}

void detections::InternalSwap(detections* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image__.InternalSwap(&other->image__);
  detection_.InternalSwap(&other->detection_);
  swap(detected_flag_, other->detected_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata detections::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void image_buf::InitAsDefaultInstance() {
}
class image_buf::_Internal {
 public:
};

image_buf::image_buf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_msg.image_buf)
}
image_buf::image_buf(const image_buf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image__(from.image__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:image_msg.image_buf)
}

void image_buf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_image_buf_image_5fmsg_2eproto.base);
}

image_buf::~image_buf() {
  // @@protoc_insertion_point(destructor:image_msg.image_buf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void image_buf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void image_buf::ArenaDtor(void* object) {
  image_buf* _this = reinterpret_cast< image_buf* >(object);
  (void)_this;
}
void image_buf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void image_buf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const image_buf& image_buf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_image_buf_image_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void image_buf::Clear() {
// @@protoc_insertion_point(message_clear_start:image_msg.image_buf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image__.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* image_buf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .image_msg.image image_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* image_buf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:image_msg.image_buf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .image_msg.image image_ = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_image_(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_msg.image_buf)
  return target;
}

size_t image_buf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_msg.image_buf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .image_msg.image image_ = 1;
  total_size += 1UL * this->_internal_image__size();
  for (const auto& msg : this->image__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void image_buf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_msg.image_buf)
  GOOGLE_DCHECK_NE(&from, this);
  const image_buf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<image_buf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_msg.image_buf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_msg.image_buf)
    MergeFrom(*source);
  }
}

void image_buf::MergeFrom(const image_buf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_msg.image_buf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image__.MergeFrom(from.image__);
}

void image_buf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_msg.image_buf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void image_buf::CopyFrom(const image_buf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_msg.image_buf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool image_buf::IsInitialized() const {
  return true;
}

void image_buf::InternalSwap(image_buf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image__.InternalSwap(&other->image__);
}

::PROTOBUF_NAMESPACE_ID::Metadata image_buf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace image_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::image_msg::image* Arena::CreateMaybeMessage< ::image_msg::image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_msg::image >(arena);
}
template<> PROTOBUF_NOINLINE ::image_msg::bbox* Arena::CreateMaybeMessage< ::image_msg::bbox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_msg::bbox >(arena);
}
template<> PROTOBUF_NOINLINE ::image_msg::one_detection* Arena::CreateMaybeMessage< ::image_msg::one_detection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_msg::one_detection >(arena);
}
template<> PROTOBUF_NOINLINE ::image_msg::detections* Arena::CreateMaybeMessage< ::image_msg::detections >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_msg::detections >(arena);
}
template<> PROTOBUF_NOINLINE ::image_msg::image_buf* Arena::CreateMaybeMessage< ::image_msg::image_buf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::image_msg::image_buf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
